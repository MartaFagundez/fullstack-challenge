{
  "info": {
    "_postman_id": "1c91520d-bb38-4231-8905-1bdf034b59e1",
    "name": "Fullstack Challenge API (V5) – Simple",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Colección Postman para la API (V5) sin pre-request scripts.\nIncluye endpoints de Export/Import JSON (IO), además de Health, Users y Orders.\nUsa la variable {{baseUrl}} (por defecto http://localhost:5000)."
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000"
    }
  ],
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "GET /health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('status ok', () => pm.expect(json.status).to.eql('ok'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "POST /users (create)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Grace Hopper\",\n  \"email\": \"grace@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Edita el body con el nombre/email que quieras crear."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.test('Tiene id/name/email/created_at', () => {",
                  "  pm.expect(json).to.have.property('id');",
                  "  pm.expect(json).to.have.property('name');",
                  "  pm.expect(json).to.have.property('email');",
                  "  pm.expect(json).to.have.property('created_at');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users (list)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Tiene items[] y total', () => {",
                  "  pm.expect(json).to.have.property('items');",
                  "  pm.expect(json).to.have.property('total');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users (search by q)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?q=&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "",
                  "description": "Ingresa aquí el texto de búsqueda (name/email)"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Introduce manualmente el valor de `q` (por nombre o email)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('items es array', () => pm.expect(Array.isArray(json.items)).to.be.true);"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users/:userId/orders (by user)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "orders"
              ]
            },
            "description": "Usa el **Path Variables** de Postman para asignar `:userId` (por ejemplo, 1)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('items es array', () => pm.expect(Array.isArray(json.items)).to.be.true);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "POST /orders (create)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": 1,\n  \"product_name\": \"Cuaderno A4\",\n  \"amount\": 12.5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Edita user_id, product_name y amount (importe decimal)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.test('amount > 0', () => pm.expect(json.amount).to.be.above(0));"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /orders (list + user)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('items[] incl. user', () => {",
                  "  if (json.items.length) {",
                  "    pm.expect(json.items[0]).to.have.property('user');",
                  "  } else {",
                  "    pm.expect(json.items).to.be.an('array');",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /orders (search by q)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders?q=&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "",
                  "description": "Ingresa aquí el texto de búsqueda por product_name"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Introduce manualmente el valor de `q` (por product_name)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('items es array', () => pm.expect(Array.isArray(json.items)).to.be.true);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "IO (Export / Import)",
      "item": [
        {
          "name": "GET /export/users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/export/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "export",
                "users"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Tiene items[]', () => pm.expect(json).to.have.property('items'));"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /export/orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/export/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "export",
                "orders"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Tiene items[]', () => pm.expect(json).to.have.property('items'));"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /export/all",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/export/all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "export",
                "all"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Tiene users[] y orders[]', () => {",
                  "  pm.expect(json).to.have.property('users');",
                  "  pm.expect(json).to.have.property('orders');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /import/users",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    { \"name\": \"Jane Roe\", \"email\": \"jane.roe@example.com\" },\n    { \"name\": \"John Public\", \"email\": \"john.public@example.com\" }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/import/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "import",
                "users"
              ]
            },
            "description": "Crea usuarios; omite duplicados por email. Edita el JSON antes de enviar."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.test('created/skipped', () => {",
                  "  pm.expect(json).to.have.property('created');",
                  "  pm.expect(json).to.have.property('skipped');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /import/orders",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    { \"user_id\": 1, \"product_name\": \"Cuaderno A4\", \"amount\": 12.5 },\n    { \"user_id\": 1, \"product_name\": \"Bolígrafo azul\", \"amount\": 3.2 }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/import/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "import",
                "orders"
              ]
            },
            "description": "Crea órdenes; requiere user_id existente y amount > 0. Edita el JSON antes de enviar."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.test('created/skipped', () => {",
                  "  pm.expect(json).to.have.property('created');",
                  "  pm.expect(json).to.have.property('skipped');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}